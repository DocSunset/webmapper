# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mapper', [dirname(__file__)])
        except ImportError:
            import _mapper
            return _mapper
        if fp is not None:
            try:
                _mod = imp.load_module('_mapper', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mapper = swig_import_helper()
    del swig_import_helper
else:
    import _mapper
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


BA_NONE = _mapper.BA_NONE
BA_MUTE = _mapper.BA_MUTE
BA_CLAMP = _mapper.BA_CLAMP
BA_FOLD = _mapper.BA_FOLD
BA_WRAP = _mapper.BA_WRAP
N_MAPPER_BOUNDARY_ACTIONS = _mapper.N_MAPPER_BOUNDARY_ACTIONS
MO_UNDEFINED = _mapper.MO_UNDEFINED
MO_BYPASS = _mapper.MO_BYPASS
MO_LINEAR = _mapper.MO_LINEAR
MO_EXPRESSION = _mapper.MO_EXPRESSION
MO_CALIBRATE = _mapper.MO_CALIBRATE
MO_REVERSE = _mapper.MO_REVERSE
N_MAPPER_MODE_TYPES = _mapper.N_MAPPER_MODE_TYPES
IN_UNDEFINED = _mapper.IN_UNDEFINED
IN_STEAL_OLDEST = _mapper.IN_STEAL_OLDEST
IN_STEAL_NEWEST = _mapper.IN_STEAL_NEWEST
N_MAPPER_INSTANCE_ALLOCATION_TYPES = _mapper.N_MAPPER_INSTANCE_ALLOCATION_TYPES
IN_NEW = _mapper.IN_NEW
IN_UPSTREAM_RELEASE = _mapper.IN_UPSTREAM_RELEASE
IN_DOWNSTREAM_RELEASE = _mapper.IN_DOWNSTREAM_RELEASE
IN_OVERFLOW = _mapper.IN_OVERFLOW
MDB_MODIFY = _mapper.MDB_MODIFY
MDB_NEW = _mapper.MDB_NEW
MDB_REMOVE = _mapper.MDB_REMOVE
class device(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, device, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, device, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mapper.new_device(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapper.delete_device
    __del__ = lambda self : None;
    def poll(self, timeout=0): return _mapper.device_poll(self, timeout)
    def ready(self): return _mapper.device_ready(self)
    def add_input(self, *args): return _mapper.device_add_input(self, *args)
    def add_output(self, *args): return _mapper.device_add_output(self, *args)
    def remove_input(self, *args): return _mapper.device_remove_input(self, *args)
    def remove_output(self, *args): return _mapper.device_remove_output(self, *args)
    def get_port(self): return _mapper.device_get_port(self)
    def get_name(self): return _mapper.device_get_name(self)
    def get_ip4(self): return _mapper.device_get_ip4(self)
    def get_interface(self): return _mapper.device_get_interface(self)
    def get_ordinal(self): return _mapper.device_get_ordinal(self)
    def get_num_inputs(self): return _mapper.device_get_num_inputs(self)
    def get_num_outputs(self): return _mapper.device_get_num_outputs(self)
    def get_input_by_name(self, *args): return _mapper.device_get_input_by_name(self, *args)
    def get_output_by_name(self, *args): return _mapper.device_get_output_by_name(self, *args)
    def get_input_by_index(self, *args): return _mapper.device_get_input_by_index(self, *args)
    def get_output_by_index(self, *args): return _mapper.device_get_output_by_index(self, *args)
    def set_property(self, *args): return _mapper.device_set_property(self, *args)
    def remove_property(self, *args): return _mapper.device_remove_property(self, *args)
    port = property(get_port)
    name = property(get_name)
    ip4 = property(get_ip4)
    interface = property(get_interface)
    ordinal = property(get_ordinal)
    num_inputs = property(get_num_inputs)
    num_outputs = property(get_num_outputs)
    def __propgetter(self):
        signal = self
        props = {}
        class propsetter(dict):
            __getitem__ = props.__getitem__
            def __setitem__(self, key, value):
                props[key] = value
                signal.set_property(key, value)
        return propsetter({})
    properties = property(__propgetter)
    def set_properties(self, props):
        [self.set_property(k, props[k]) for k in props]

device_swigregister = _mapper.device_swigregister
device_swigregister(device)

class signal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, signal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, signal, name)
    __repr__ = _swig_repr
    def get_name(self): return _mapper.signal_get_name(self)
    def get_full_name(self): return _mapper.signal_get_full_name(self)
    def update(self, *args): return _mapper.signal_update(self, *args)
    def reserve_instances(self, *args): return _mapper.signal_reserve_instances(self, *args)
    def update_instance(self, *args): return _mapper.signal_update_instance(self, *args)
    def release_instance(self, *args): return _mapper.signal_release_instance(self, *args)
    def active_instance_id(self, *args): return _mapper.signal_active_instance_id(self, *args)
    def num_active_instances(self): return _mapper.signal_num_active_instances(self)
    def num_reserved_instances(self): return _mapper.signal_num_reserved_instances(self)
    def set_allocation_mode(self, *args): return _mapper.signal_set_allocation_mode(self, *args)
    def set_instance_event_callback(self, PyFunc=None, flags=0): return _mapper.signal_set_instance_event_callback(self, PyFunc, flags)
    def set_callback(self, PyFunc=None): return _mapper.signal_set_callback(self, PyFunc)
    def query_remotes(self, timetag=0): return _mapper.signal_query_remotes(self, timetag)
    def set_minimum(self, *args): return _mapper.signal_set_minimum(self, *args)
    def set_maximum(self, *args): return _mapper.signal_set_maximum(self, *args)
    def get_minimum(self): return _mapper.signal_get_minimum(self)
    def get_maximum(self): return _mapper.signal_get_maximum(self)
    def get_length(self): return _mapper.signal_get_length(self)
    def get_type(self): return _mapper.signal_get_type(self)
    def get_is_output(self): return _mapper.signal_get_is_output(self)
    def get_device_name(self): return _mapper.signal_get_device_name(self)
    def get_unit(self): return _mapper.signal_get_unit(self)
    def get_properties(self): return _mapper.signal_get_properties(self)
    def set_property(self, *args): return _mapper.signal_set_property(self, *args)
    def remove_property(self, *args): return _mapper.signal_remove_property(self, *args)
    minimum = property(get_minimum, set_minimum)
    maximum = property(get_maximum, set_maximum)
    name = property(get_name)
    full_name = property(get_full_name)
    length = property(get_length)
    type = property(get_type)
    is_output = property(get_is_output)
    unit = property(get_unit)
    def __propgetter(self):
        signal = self
        props = self.get_properties()
        class propsetter(dict):
            __getitem__ = props.__getitem__
            def __setitem__(self, key, value):
                props[key] = value
                signal.set_property(key, value)
        return propsetter(self.get_properties())
    properties = property(__propgetter)
    def set_properties(self, props):
        [self.set_property(k, props[k]) for k in props]
    def __setattr__(self, name, value):
        try:
            {'minimum': self.set_minimum,
             'maximum': self.set_maximum}[name](value)
        except KeyError:
            _swig_setattr(self, signal, name, value)

    def __init__(self): 
        this = _mapper.new_signal()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapper.delete_signal
    __del__ = lambda self : None;
signal_swigregister = _mapper.signal_swigregister
signal_swigregister(signal)

class monitor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, monitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, monitor, name)
    __repr__ = _swig_repr
    def __init__(self, DISOWN=None, enable_autorequest=1): 
        this = _mapper.new_monitor(DISOWN, enable_autorequest)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapper.delete_monitor
    __del__ = lambda self : None;
    def poll(self, timeout=0): return _mapper.monitor_poll(self, timeout)
    def get_db(self): return _mapper.monitor_get_db(self)
    def autorequest(self, *args): return _mapper.monitor_autorequest(self, *args)
    def request_devices(self): return _mapper.monitor_request_devices(self)
    def request_device_info(self, *args): return _mapper.monitor_request_device_info(self, *args)
    def request_signals_by_device_name(self, *args): return _mapper.monitor_request_signals_by_device_name(self, *args)
    def request_input_signals_by_device_name(self, *args): return _mapper.monitor_request_input_signals_by_device_name(self, *args)
    def request_output_signals_by_device_name(self, *args): return _mapper.monitor_request_output_signals_by_device_name(self, *args)
    def request_links_by_device_name(self, *args): return _mapper.monitor_request_links_by_device_name(self, *args)
    def request_links_by_src_device_name(self, *args): return _mapper.monitor_request_links_by_src_device_name(self, *args)
    def request_links_by_dest_device_name(self, *args): return _mapper.monitor_request_links_by_dest_device_name(self, *args)
    def request_connections_by_device_name(self, *args): return _mapper.monitor_request_connections_by_device_name(self, *args)
    def request_connections_by_src_device_name(self, *args): return _mapper.monitor_request_connections_by_src_device_name(self, *args)
    def request_connections_by_dest_device_name(self, *args): return _mapper.monitor_request_connections_by_dest_device_name(self, *args)
    def link(self, *args): return _mapper.monitor_link(self, *args)
    def unlink(self, *args): return _mapper.monitor_unlink(self, *args)
    def modify(self, *args): return _mapper.monitor_modify(self, *args)
    def connect(self, *args): return _mapper.monitor_connect(self, *args)
    def disconnect(self, *args): return _mapper.monitor_disconnect(self, *args)
    db = property(get_db)

monitor_swigregister = _mapper.monitor_swigregister
monitor_swigregister(monitor)

class db(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, db, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, db, name)
    __repr__ = _swig_repr
    def add_device_callback(self, *args): return _mapper.db_add_device_callback(self, *args)
    def remove_device_callback(self, *args): return _mapper.db_remove_device_callback(self, *args)
    def add_signal_callback(self, *args): return _mapper.db_add_signal_callback(self, *args)
    def remove_signal_callback(self, *args): return _mapper.db_remove_signal_callback(self, *args)
    def add_connection_callback(self, *args): return _mapper.db_add_connection_callback(self, *args)
    def remove_connection_callback(self, *args): return _mapper.db_remove_connection_callback(self, *args)
    def add_link_callback(self, *args): return _mapper.db_add_link_callback(self, *args)
    def remove_link_callback(self, *args): return _mapper.db_remove_link_callback(self, *args)
    def get_device_by_name(self, *args): return _mapper.db_get_device_by_name(self, *args)
    def get_all_devices(self): return _mapper.db_get_all_devices(self)
    def __match_devices_by_name(self, *args): return _mapper.db___match_devices_by_name(self, *args)
    def device_next(self, *args): return _mapper.db_device_next(self, *args)
    def get_all_inputs(self): return _mapper.db_get_all_inputs(self)
    def get_all_outputs(self): return _mapper.db_get_all_outputs(self)
    def get_inputs_by_device_name(self, *args): return _mapper.db_get_inputs_by_device_name(self, *args)
    def get_outputs_by_device_name(self, *args): return _mapper.db_get_outputs_by_device_name(self, *args)
    def get_input_by_device_and_signal_name(self, *args): return _mapper.db_get_input_by_device_and_signal_name(self, *args)
    def get_output_by_device_and_signal_name(self, *args): return _mapper.db_get_output_by_device_and_signal_name(self, *args)
    def __match_inputs_by_device_name(self, *args): return _mapper.db___match_inputs_by_device_name(self, *args)
    def __match_outputs_by_device_name(self, *args): return _mapper.db___match_outputs_by_device_name(self, *args)
    def signal_next(self, *args): return _mapper.db_signal_next(self, *args)
    def get_all_connections(self): return _mapper.db_get_all_connections(self)
    def get_connections_by_device_name(self, *args): return _mapper.db_get_connections_by_device_name(self, *args)
    def get_connections_by_src_signal_name(self, *args): return _mapper.db_get_connections_by_src_signal_name(self, *args)
    def get_connections_by_src_device_and_signal_names(self, *args): return _mapper.db_get_connections_by_src_device_and_signal_names(self, *args)
    def get_connections_by_dest_signal_name(self, *args): return _mapper.db_get_connections_by_dest_signal_name(self, *args)
    def get_connections_by_dest_device_and_signal_names(self, *args): return _mapper.db_get_connections_by_dest_device_and_signal_names(self, *args)
    def get_connections_by_device_and_signal_names(self, *args): return _mapper.db_get_connections_by_device_and_signal_names(self, *args)
    def connection_by_signal_full_names(self, *args): return _mapper.db_connection_by_signal_full_names(self, *args)
    def get_connections_by_src_dest_device_names(self, *args): return _mapper.db_get_connections_by_src_dest_device_names(self, *args)
    def connection_next(self, *args): return _mapper.db_connection_next(self, *args)
    def get_all_links(self): return _mapper.db_get_all_links(self)
    def get_links_by_device_name(self, *args): return _mapper.db_get_links_by_device_name(self, *args)
    def get_links_by_src_device_name(self, *args): return _mapper.db_get_links_by_src_device_name(self, *args)
    def get_links_by_dest_device_name(self, *args): return _mapper.db_get_links_by_dest_device_name(self, *args)
    def link_by_src_dest_names(self, *args): return _mapper.db_link_by_src_dest_names(self, *args)
    def link_next(self, *args): return _mapper.db_link_next(self, *args)
    def make_iterator(first, next):
        def it(self, *args):
            (d, p) = first(self, *args)
            while p:
                yield d
                (d, p) = next(self, p)
        return it
    all_devices = make_iterator(get_all_devices, device_next)
    match_devices_by_name = make_iterator(__match_devices_by_name,
                                          device_next)
    all_inputs = make_iterator(get_all_inputs, signal_next)
    all_outputs = make_iterator(get_all_outputs, signal_next)
    inputs_by_device_name = make_iterator(get_inputs_by_device_name,
                                          signal_next)
    outputs_by_device_name = make_iterator(get_outputs_by_device_name,
                                           signal_next)
    match_inputs_by_device_name = make_iterator(
        __match_inputs_by_device_name, signal_next)
    match_outputs_by_device_name = make_iterator(
        __match_outputs_by_device_name, signal_next)
    all_connections = make_iterator(get_all_connections, connection_next)
    connections_by_device_name = make_iterator(get_connections_by_device_name,
                                            connection_next)
    connections_by_src_signal_name = make_iterator(get_connections_by_src_signal_name,
                                                   connection_next)
    connections_by_src_device_and_signal_names = make_iterator(
        get_connections_by_src_device_and_signal_names, connection_next)
    connections_by_dest_signal_name = make_iterator(get_connections_by_dest_signal_name,
                                            connection_next)
    connections_by_dest_device_and_signal_names = make_iterator(
        get_connections_by_dest_device_and_signal_names, connection_next)
    connections_by_device_and_signal_names = make_iterator(
        get_connections_by_device_and_signal_names, connection_next)
    connections_by_src_dest_device_names = make_iterator(
        get_connections_by_src_dest_device_names, connection_next)
    all_links = make_iterator(get_all_links, link_next)
    links_by_device_name = make_iterator(get_links_by_device_name,
                                         link_next)
    links_by_src_device_name = make_iterator(
        get_links_by_src_device_name, link_next)
    links_by_dest_device_name = make_iterator(
        get_links_by_dest_device_name, link_next)

    def __init__(self): 
        this = _mapper.new_db()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapper.delete_db
    __del__ = lambda self : None;
db_swigregister = _mapper.db_swigregister
db_swigregister(db)

class admin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, admin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, admin, name)
    __repr__ = _swig_repr
    def __init__(self, iface=None, ip=None, port=7570): 
        this = _mapper.new_admin(iface, ip, port)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapper.delete_admin
    __del__ = lambda self : None;
admin_swigregister = _mapper.admin_swigregister
admin_swigregister(admin)

# This file is compatible with both classic and new-style classes.


